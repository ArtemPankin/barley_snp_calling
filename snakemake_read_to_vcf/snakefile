import yaml

shell.prefix("set -euo pipefail; ")

#################
## CONFIG files
#################

configfile: "config.yaml"

with open('cluster.yaml', mode='r') as f:
    cluster_config = yaml.load(f)

#################
## reference genome id
#################

REFERENCE = config["genome"]
SAMPLES = config["sample_name"]
REPLICATES=[1,2]

rule all:
     input:
           expand("data/{genome}.dict", genome = REFERENCE),
           expand("data/{genome}.fa.fai", genome = REFERENCE),
           expand("data/{genome}.fa.pac", genome = REFERENCE),
	   expand("bam_files/{sample}.sam.gz", sample = SAMPLES.split(" "))
rule create_seq_dictionary:
    input: 
             "data/{genome}.fa"
    output:
             "data/{genome}.dict"
    log:
             "logs/seq_dict/{genome}.log"
    shell:
             "(gatk CreateSequenceDictionary -R {input} -O {output}) 2> {log}"

rule samtools_ref_index:
	input:
		"data/{genome}.fa"
	output:
                "data/{genome}.fa.fai"
	log:
	        "logs/sam_ref_index/{genome}.log"
	shell:
		"(samtools faidx {input}) 2> {log}"

rule bwa_ref_index:
	input:
		"data/{genome}.fa"
	output:
                "data/{genome}.fa.pac"
	log:
                "logs/bwa_index/{genome}.log"
	shell:
    		"(bwa index {input}) 2> {log}"

rule bzip2_fastq:
        input:
	        "data/{sample}_{repl}.fq.bz2"
	output:
		temp("filtered_reads/{sample}_{repl}.fq")
	log:
                "logs/bzip2/{sample}_{repl}.log"
	params:
		bzip="-dck"
	shell:
		"(bzip2 {params.bzip} {input} | "
		"""awk "{{if(NF==2) print \$1\\" /{wildcards.repl}\\"; else print \$1}}" > {output}) 2> {log}"""

rule cd_hit:
	input:
		read1="filtered_reads/{sample}_1.fq",
		read2="filtered_reads/{sample}_2.fq"
	output:
		filtread1=temp("filtered_reads/{sample}_1_cdhit"),
		filtread2=temp("filtered_reads/{sample}_2_cdhit")
	shadow:
	        "shallow"
	log:
                "logs/cd_hit/{sample}.log"
	shell:
	        "(cd-hit-dup -i {input.read1} -i2 {input.read2} -o {output.filtread1} -o2 {output.filtread2}) 2> {log}"
	
rule fastx_filt:
	input:
		"filtered_reads/{sample}_{repl}_cdhit"
	output:
		temp("filtered_reads/{sample}_{repl}_cdhit_filtered")
	shadow:
                "shallow"
	log:
		"logs/fastx/{sample}_{repl}.log"
	shell:
		"(fastx_trimmer -f 5 -l 95 -Q33 < {input} | " 
		"fastx_clipper -Q33 -l 30 -a GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT | " 
		"fastx_clipper -Q33 -l 30 -a GATCGGAAGAGCACACGTCTGAACTCCAGTCAC | "
		"fastx_artifacts_filter -Q33 > {output}) 2> {log}"

rule sync_paired:
	input:
		"filtered_reads/{sample}_1_cdhit_filtered",
		"filtered_reads/{sample}_2_cdhit_filtered"
	output:
		temp("filtered_reads/{sample}_1_cdhit_filtered_pairs_R1.fastq"),
		temp("filtered_reads/{sample}_2_cdhit_filtered_pairs_R2.fastq")
	log: 
		"logs/sync_paired/{sample}.log"
	script:
		"(scripts/fastqCombinePairedEnd.py) 2> {log}"


rule lighter:
	input:
                 fq1="filtered_reads/{sample}_1_cdhit_filtered_pairs_R1.fastq",
                 fq2="filtered_reads/{sample}_2_cdhit_filtered_pairs_R2.fastq"
	output:
		 "filtered_reads/{sample}_1_cdhit_filtered_pairs_R1.cor.fq",
                 "filtered_reads/{sample}_2_cdhit_filtered_pairs_R2.cor.fq"
	params:
	    	 outdir="filtered_reads"
	threads: 2
	log:
		 "logs/lighter/{sample}.log"
	shell:
		 "(lighter -r {input.fq1} -r {input.fq2} -K 23 14000000 -maxcor 2 -t {threads} -od {params.outdir}) 2> {log}"

rule bwa_map:
	input:
		ref=expand("data/{genome}.fa", genome = REFERENCE),
		fq=expand("filtered_reads/{{sample}}_{repl}_cdhit_filtered_pairs_R{repl}.cor.fq", repl = REPLICATES)
	output:
		"bam_files/{sample}.sam.gz"
	threads: 2
	log:
		"logs/bwa/{sample}.log"
	shell:
		"(bwa mem {input.ref} {input.fq} -t {threads} -v 0 && " 
		"gzip -3  > {output}) 2> {log}"
